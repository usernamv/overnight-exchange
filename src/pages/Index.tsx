import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import Icon from '@/components/ui/icon';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/contexts/AuthContext';
import CurrencySelector from '@/components/CurrencySelector';
import ExchangeFlow from '@/components/ExchangeFlow';
import { currencies, getCurrenciesByType } from '@/data/currencies';
import { notifyNewExchange } from '@/utils/telegramNotifications';

const EXCHANGE_API_URL = 'https://functions.poehali.dev/cb22a964-580b-490f-a97e-6a94308c6580';

interface CryptoRate {
  symbol: string;
  name: string;
  price: number;
  change24h: number;
}

const Index = () => {
  const navigate = useNavigate();
  const { toast } = useToast();
  const { isAuthenticated, isAdmin, login } = useAuth();
  const [fromAmount, setFromAmount] = useState('1');
  const [fromCrypto, setFromCrypto] = useState('BTC');
  const [toCrypto, setToCrypto] = useState('USDT');
  const [toAmount, setToAmount] = useState('0');
  const [rates, setRates] = useState<CryptoRate[]>([]);
  const [loading, setLoading] = useState(true);
  const [showAdminLogin, setShowAdminLogin] = useState(false);
  const [adminEmail, setAdminEmail] = useState('');
  const [adminPassword, setAdminPassword] = useState('');

  const displayCryptos = getCurrenciesByType('crypto').filter(c => 
    ['BTC', 'ETH', 'USDT', 'BNB', 'SOL', 'XRP', 'ADA', 'AVAX', 'DOT', 'MATIC', 'LINK', 'UNI'].includes(c.symbol)
  );

  useEffect(() => {
    fetchRates();
  }, []);

  useEffect(() => {
    calculateExchange();
  }, [fromAmount, fromCrypto, toCrypto, rates]);

  const fetchRates = async () => {
    try {
      const cryptoSymbols = currencies.filter(c => c.type === 'crypto').map(c => c.symbol).join(',');
      const fiatSymbols = currencies.filter(c => c.type === 'fiat').map(c => c.symbol).join(',');
      
      const response = await fetch(
        `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${cryptoSymbols}&tsyms=${fiatSymbols}`
      );
      const data = await response.json();
      
      const ratesData: CryptoRate[] = currencies
        .filter(c => c.type === 'crypto')
        .map(crypto => ({
          symbol: crypto.symbol,
          name: crypto.name,
          price: data.RAW?.[crypto.symbol]?.USD?.PRICE || 0,
          change24h: data.RAW?.[crypto.symbol]?.USD?.CHANGEPCT24HOUR || 0,
        }));
      
      setRates(ratesData);
      setLoading(false);
    } catch (error) {
      console.error('Failed to fetch rates:', error);
      setLoading(false);
    }
  };

  const calculateExchange = () => {
    if (!fromAmount || isNaN(Number(fromAmount)) || rates.length === 0) {
      setToAmount('0');
      return;
    }

    const fromRate = rates.find(r => r.symbol === fromCrypto);
    const toRate = rates.find(r => r.symbol === toCrypto);

    if (fromRate && toRate) {
      const fromValueUSD = Number(fromAmount) * fromRate.price;
      const toValue = fromValueUSD / toRate.price;
      setToAmount(toValue.toFixed(6));
    }
  };

  const handleSwap = () => {
    const tempCrypto = fromCrypto;
    setFromCrypto(toCrypto);
    setToCrypto(tempCrypto);
  };

  const handleAdminLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    const success = await login(adminEmail, adminPassword);
    if (success) {
      setShowAdminLogin(false);
      setAdminEmail('');
      setAdminPassword('');
      toast({
        title: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω',
        description: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!',
      });
      navigate('/admin');
    } else {
      toast({
        title: '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞',
        description: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å',
        variant: 'destructive',
      });
    }
  };

  const handleExchange = async () => {
    try {
      const fromRate = rates.find(r => r.symbol === fromCrypto);
      const toRate = rates.find(r => r.symbol === toCrypto);
      
      if (!fromRate || !toRate) {
        toast({
          title: '–û—à–∏–±–∫–∞',
          description: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å',
          variant: 'destructive',
        });
        return;
      }

      const exchangeRate = fromRate.price / toRate.price;

      const response = await fetch(EXCHANGE_API_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'create_exchange',
          from_currency: fromCrypto,
          to_currency: toCrypto,
          from_amount: parseFloat(fromAmount),
          to_amount: parseFloat(toAmount),
          exchange_rate: exchangeRate,
          status: 'pending',
        }),
      });

      const result = await response.json();

      if (result.success) {
        toast({
          title: '–û–±–º–µ–Ω —Å–æ–∑–¥–∞–Ω',
          description: `${fromAmount} ${fromCrypto} ‚Üí ${toAmount} ${toCrypto}. ID: ${result.exchange_id}`,
        });
        
        notifyNewExchange({
          from_currency: fromCrypto,
          to_currency: toCrypto,
          from_amount: fromAmount,
          to_amount: toAmount,
          exchange_id: result.exchange_id,
          user_email: isAuthenticated ? 'authenticated-user' : 'guest',
        });
      } else {
        throw new Error('Failed to create exchange');
      }
    } catch (error) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±–º–µ–Ω',
        variant: 'destructive',
      });
    }
  };

  return (
    <div className="min-h-screen bg-background text-foreground">
      {/* Header */}
      <header className="border-b border-border/40 backdrop-blur-sm sticky top-0 z-50 bg-background/80">
        <nav className="container mx-auto px-4 py-4 flex items-center justify-between">
          <div className="flex items-center gap-2">
            <div className="w-10 h-10 rounded-lg bg-gradient-to-br from-primary to-secondary flex items-center justify-center glow-cyan">
              <span className="text-2xl">üåô</span>
            </div>
            <span className="text-2xl font-bold bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent">
              overnight exchange
            </span>
          </div>
          <div className="hidden md:flex items-center gap-6">
            <a href="#exchange" className="hover:text-primary transition-colors">–û–±–º–µ–Ω</a>
            <a href="#rates" className="hover:text-primary transition-colors">–ö—É—Ä—Å—ã</a>
            <Button variant="ghost" onClick={() => navigate('/help')}>
              <Icon name="HelpCircle" size={18} className="mr-1" />
              –ü–æ–º–æ—â—å
            </Button>
            {!isAuthenticated ? (
              <>
                <Button
                  variant="outline"
                  className="border-primary text-primary hover:bg-primary hover:text-primary-foreground"
                  onClick={() => navigate('/login')}
                >
                  –í–æ–π—Ç–∏
                </Button>
                <Button
                  variant="ghost"
                  size="sm"
                  className="text-muted-foreground hover:text-secondary"
                  onClick={() => setShowAdminLogin(true)}
                >
                  <Icon name="ShieldCheck" size={16} className="mr-1" />
                  –ê–¥–º–∏–Ω
                </Button>
              </>
            ) : (
              <>
                <Button
                  variant="outline"
                  onClick={() => navigate('/dashboard')}
                >
                  <Icon name="User" size={18} className="mr-2" />
                  –ö–∞–±–∏–Ω–µ—Ç
                </Button>
                {isAdmin && (
                  <Button
                    variant="outline"
                    className="border-secondary text-secondary hover:bg-secondary hover:text-secondary-foreground"
                    onClick={() => navigate('/admin')}
                  >
                    <Icon name="Shield" size={18} className="mr-2" />
                    –ê–¥–º–∏–Ω
                  </Button>
                )}
              </>
            )}
          </div>
        </nav>
      </header>

      {/* Hero Section */}
      <section className="container mx-auto px-4 py-20 text-center">
        <div className="max-w-4xl mx-auto space-y-6 animate-fade-in">
          <h1 className="text-5xl md:text-7xl font-bold leading-tight">
            –û–±–º–µ–Ω–∏–≤–∞–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
            <span className="block bg-gradient-to-r from-primary via-secondary to-primary bg-clip-text text-transparent text-glow-cyan">
              –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ
            </span>
          </h1>
          <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
            –ë—ã—Å—Ç—Ä—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±–º–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –ø–æ –ª—É—á—à–∏–º –∫—É—Ä—Å–∞–º. –†–∞–±–æ—Ç–∞–µ–º 24/7 –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö.
          </p>
          <div className="flex gap-4 justify-center flex-wrap">
            <Button 
              size="lg" 
              className="bg-primary hover:bg-primary/90 glow-cyan"
              onClick={() => {
                document.getElementById('exchange')?.scrollIntoView({ behavior: 'smooth' });
              }}
            >
              <Icon name="Zap" size={20} className="mr-2" />
              –ù–∞—á–∞—Ç—å –æ–±–º–µ–Ω
            </Button>
            <Button 
              size="lg" 
              variant="outline" 
              className="border-primary/50"
              onClick={() => navigate('/help')}
            >
              <Icon name="Shield" size={20} className="mr-2" />
              AML/KYC
            </Button>
          </div>
        </div>
      </section>

      {/* Exchange Calculator */}
      <section id="exchange" className="container mx-auto px-4 py-16">
        <Card className="max-w-2xl mx-auto p-8 bg-card/50 backdrop-blur-sm border-border/40 animate-scale-in">
          <h2 className="text-3xl font-bold mb-6 text-center">–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ–±–º–µ–Ω–∞</h2>
          
          <div className="space-y-6">
            {/* From */}
            <div className="space-y-2">
              <label className="text-sm text-muted-foreground">–û—Ç–¥–∞–µ—Ç–µ</label>
              <div className="flex gap-2">
                <Input
                  type="number"
                  value={fromAmount}
                  onChange={(e) => setFromAmount(e.target.value)}
                  className="flex-1 bg-background/50 border-border/40"
                  placeholder="0.00"
                />
                <CurrencySelector value={fromCrypto} onChange={setFromCrypto} />
              </div>
            </div>

            {/* Swap Button */}
            <div className="flex justify-center">
              <Button
                onClick={handleSwap}
                variant="outline"
                size="icon"
                className="rounded-full border-primary/50 hover:bg-primary/10 hover:rotate-180 transition-all duration-300"
              >
                <Icon name="ArrowDownUp" size={20} />
              </Button>
            </div>

            {/* To */}
            <div className="space-y-2">
              <label className="text-sm text-muted-foreground">–ü–æ–ª—É—á–∞–µ—Ç–µ</label>
              <div className="flex gap-2">
                <Input
                  type="text"
                  value={toAmount}
                  readOnly
                  className="flex-1 bg-background/50 border-border/40"
                  placeholder="0.00"
                />
                <CurrencySelector value={toCrypto} onChange={setToCrypto} />
              </div>
            </div>

            <ExchangeFlow
              fromCurrency={fromCrypto}
              toCurrency={toCrypto}
              fromAmount={fromAmount}
              toAmount={toAmount}
              exchangeRate={rates.find(r => r.symbol === fromCrypto)?.price || 0}
              onComplete={() => {
                setFromAmount('1');
                setToAmount('0');
              }}
            />
          </div>
        </Card>
      </section>

      {/* Rates */}
      <section id="rates" className="container mx-auto px-4 py-16">
        <h2 className="text-4xl font-bold mb-10 text-center">–ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç</h2>
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6 max-w-6xl mx-auto">
          {loading ? (
            [...Array(6)].map((_, i) => (
              <Card key={i} className="p-6 bg-card/50 backdrop-blur-sm border-border/40 animate-pulse">
                <div className="h-20 bg-muted rounded"></div>
              </Card>
            ))
          ) : (
            rates.filter(r => displayCryptos.some(c => c.symbol === r.symbol)).map((rate) => {
              const currency = displayCryptos.find(c => c.symbol === rate.symbol);
              return (
                <Card
                  key={rate.symbol}
                  className="p-6 bg-card/50 backdrop-blur-sm border-border/40 hover:border-primary/50 transition-all hover:scale-105"
                >
                  <div className="flex items-center justify-between mb-4">
                    <div>
                      <h3 className="text-xl font-bold">{rate.symbol}</h3>
                      <p className="text-sm text-muted-foreground">{rate.name}</p>
                    </div>
                    <div className="text-3xl">
                      {currency?.icon}
                    </div>
                  </div>
                  <div className="space-y-2">
                    <p className="text-2xl font-bold">${rate.price.toLocaleString()}</p>
                    <p className={`text-sm flex items-center gap-1 ${rate.change24h >= 0 ? 'text-green-400' : 'text-red-400'}`}>
                      <Icon name={rate.change24h >= 0 ? 'TrendingUp' : 'TrendingDown'} size={16} />
                      {rate.change24h >= 0 ? '+' : ''}{rate.change24h.toFixed(2)}%
                    </p>
                  </div>
                </Card>
              );
            })
          )}
        </div>
      </section>

      {/* Features */}
      <section className="container mx-auto px-4 py-16">
        <h2 className="text-4xl font-bold mb-10 text-center">–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å</h2>
        <div className="grid md:grid-cols-3 gap-8 max-w-5xl mx-auto">
          <Card className="p-6 bg-card/50 backdrop-blur-sm border-border/40 hover:border-primary/50 transition-all hover:scale-105">
            <div className="w-12 h-12 rounded-lg bg-primary/10 flex items-center justify-center mb-4 glow-cyan">
              <Icon name="Zap" size={24} className="text-primary" />
            </div>
            <h3 className="text-xl font-bold mb-2">–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ–±–º–µ–Ω</h3>
            <p className="text-muted-foreground">–û–±–º–µ–Ω –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–∞ —Å—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–µ–∫—É–Ω–¥—ã. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫.</p>
          </Card>

          <Card className="p-6 bg-card/50 backdrop-blur-sm border-border/40 hover:border-secondary/50 transition-all hover:scale-105">
            <div className="w-12 h-12 rounded-lg bg-secondary/10 flex items-center justify-center mb-4 glow-purple">
              <Icon name="Shield" size={24} className="text-secondary" />
            </div>
            <h3 className="text-xl font-bold mb-2">–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</h3>
            <p className="text-muted-foreground">SSL —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è. –í–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π.</p>
          </Card>

          <Card className="p-6 bg-card/50 backdrop-blur-sm border-border/40 hover:border-primary/50 transition-all hover:scale-105">
            <div className="w-12 h-12 rounded-lg bg-primary/10 flex items-center justify-center mb-4 glow-cyan">
              <Icon name="TrendingUp" size={24} className="text-primary" />
            </div>
            <h3 className="text-xl font-bold mb-2">–õ—É—á—à–∏–µ –∫—É—Ä—Å—ã</h3>
            <p className="text-muted-foreground">–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –∫—É—Ä—Å—ã –±–µ–∑ —Å–∫—Ä—ã—Ç—ã—Ö –∫–æ–º–∏—Å—Å–∏–π. –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è.</p>
          </Card>
        </div>
      </section>

      {/* FAQ */}
      <section id="faq" className="container mx-auto px-4 py-16">
        <h2 className="text-4xl font-bold mb-10 text-center">–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã</h2>
        <Accordion type="single" collapsible className="max-w-3xl mx-auto">
          <AccordionItem value="item-1" className="border-border/40">
            <AccordionTrigger className="text-lg hover:text-primary">
              –ö–∞–∫ –¥–æ–ª–≥–æ –∑–∞–Ω–∏–º–∞–µ—Ç –æ–±–º–µ–Ω?
            </AccordionTrigger>
            <AccordionContent className="text-muted-foreground">
              –û–±–º–µ–Ω –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 5-15 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –≤ –±–ª–æ–∫—á–µ–π–Ω–µ. 
              –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç.
            </AccordionContent>
          </AccordionItem>

          <AccordionItem value="item-2" className="border-border/40">
            <AccordionTrigger className="text-lg hover:text-primary">
              –ï—Å—Ç—å –ª–∏ –ª–∏–º–∏—Ç—ã –Ω–∞ –æ–±–º–µ–Ω?
            </AccordionTrigger>
            <AccordionContent className="text-muted-foreground">
              –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –Ω–µ—Ç, 
              –Ω–æ –¥–ª—è —Å—É–º–º —Å–≤—ã—à–µ $10,000 –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è KYC.
            </AccordionContent>
          </AccordionItem>

          <AccordionItem value="item-3" className="border-border/40">
            <AccordionTrigger className="text-lg hover:text-primary">
              –ö–∞–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –±–µ—Ä–µ—Ç —Å–µ—Ä–≤–∏—Å?
            </AccordionTrigger>
            <AccordionContent className="text-muted-foreground">
              –ù–∞—à–∞ –∫–æ–º–∏—Å—Å–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 0.5% –æ—Ç —Å—É–º–º—ã –æ–±–º–µ–Ω–∞. –≠—Ç–æ –æ–¥–Ω–∞ –∏–∑ —Å–∞–º—ã—Ö –Ω–∏–∑–∫–∏—Ö –∫–æ–º–∏—Å—Å–∏–π –Ω–∞ —Ä—ã–Ω–∫–µ. 
              –ö–æ–º–∏—Å—Å–∏—è —É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞ –≤ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π –∫—É—Ä—Å.
            </AccordionContent>
          </AccordionItem>

          <AccordionItem value="item-4" className="border-border/40">
            <AccordionTrigger className="text-lg hover:text-primary">
              –ù—É–∂–Ω–∞ –ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –æ–±–º–µ–Ω–∞?
            </AccordionTrigger>
            <AccordionContent className="text-muted-foreground">
              –î–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —Å—É–º–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è. 
              –î–ª—è —Å—É–º–º —Å–≤—ã—à–µ $10,000 –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.
            </AccordionContent>
          </AccordionItem>

          <AccordionItem value="item-5" className="border-border/40">
            <AccordionTrigger className="text-lg hover:text-primary">
              –ß—Ç–æ —Ç–∞–∫–æ–µ AML/KYC –ø–æ–ª–∏—Ç–∏–∫–∞?
            </AccordionTrigger>
            <AccordionContent className="text-muted-foreground">
              AML (Anti-Money Laundering) –∏ KYC (Know Your Customer) - —ç—Ç–æ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 
              –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—Ç–º—ã–≤–∞–Ω–∏—è –¥–µ–Ω–µ–≥. –ú—ã —Å–ª–µ–¥—É–µ–º –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
            </AccordionContent>
          </AccordionItem>
        </Accordion>
      </section>

      {/* Contact */}
      <section id="contact" className="container mx-auto px-4 py-16">
        <Card className="max-w-4xl mx-auto p-8 bg-card/50 backdrop-blur-sm border-border/40">
          <h2 className="text-4xl font-bold mb-6 text-center">–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7</h2>
          <p className="text-center text-muted-foreground mb-8">
            –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å –≤–∞–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
          </p>
          <div className="grid md:grid-cols-3 gap-6">
            <div className="flex flex-col items-center gap-2 p-4">
              <div className="w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center glow-cyan">
                <Icon name="Mail" size={24} className="text-primary" />
              </div>
              <h3 className="font-semibold">Email</h3>
              <p className="text-sm text-muted-foreground">support@overnight.exchange</p>
            </div>
            <div className="flex flex-col items-center gap-2 p-4">
              <div className="w-12 h-12 rounded-full bg-secondary/10 flex items-center justify-center glow-purple">
                <Icon name="MessageCircle" size={24} className="text-secondary" />
              </div>
              <h3 className="font-semibold">Telegram</h3>
              <p className="text-sm text-muted-foreground">@overnight_support</p>
            </div>
            <div className="flex flex-col items-center gap-2 p-4">
              <div className="w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center glow-cyan">
                <Icon name="Clock" size={24} className="text-primary" />
              </div>
              <h3 className="font-semibold">–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã</h3>
              <p className="text-sm text-muted-foreground">24/7 –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö</p>
            </div>
          </div>
        </Card>
      </section>

      {/* Footer */}
      <footer className="border-t border-border/40 mt-16">
        <div className="container mx-auto px-4 py-8">
          <div className="flex flex-col md:flex-row items-center justify-between gap-4">
            <div className="flex items-center gap-2">
              <div className="w-8 h-8 rounded-lg bg-gradient-to-br from-primary to-secondary flex items-center justify-center">
                <span className="text-xl">üåô</span>
              </div>
              <span className="font-bold">overnight exchange</span>
            </div>
            <p className="text-sm text-muted-foreground">
              ¬© 2024 overnight exchange. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.
            </p>
            <div className="flex gap-4">
              <a href="#" className="text-muted-foreground hover:text-primary transition-colors">
                –û –Ω–∞—Å
              </a>
              <a href="#" className="text-muted-foreground hover:text-primary transition-colors">
                AML/KYC
              </a>
              <a href="#" className="text-muted-foreground hover:text-primary transition-colors">
                –ü—Ä–∞–≤–∏–ª–∞
              </a>
            </div>
          </div>
        </div>
      </footer>

      {/* Admin Login Modal */}
      <Dialog open={showAdminLogin} onOpenChange={setShowAdminLogin}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Icon name="ShieldCheck" size={24} className="text-secondary" />
              –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
            </DialogTitle>
            <DialogDescription>
              –í–≤–µ–¥–∏—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            </DialogDescription>
          </DialogHeader>
          <form onSubmit={handleAdminLogin} className="space-y-4">
            <div className="space-y-2">
              <label htmlFor="admin-email" className="text-sm font-medium">
                Email
              </label>
              <Input
                id="admin-email"
                type="email"
                placeholder="admin@overnight.exchange"
                value={adminEmail}
                onChange={(e) => setAdminEmail(e.target.value)}
                required
                className="bg-background"
              />
            </div>
            <div className="space-y-2">
              <label htmlFor="admin-password" className="text-sm font-medium">
                –ü–∞—Ä–æ–ª—å
              </label>
              <Input
                id="admin-password"
                type="password"
                placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                value={adminPassword}
                onChange={(e) => setAdminPassword(e.target.value)}
                required
                className="bg-background"
              />
            </div>
            <div className="flex gap-3 pt-4">
              <Button
                type="button"
                variant="outline"
                onClick={() => setShowAdminLogin(false)}
                className="flex-1"
              >
                –û—Ç–º–µ–Ω–∞
              </Button>
              <Button
                type="submit"
                className="flex-1 bg-secondary hover:bg-secondary/90"
              >
                <Icon name="LogIn" size={18} className="mr-2" />
                –í–æ–π—Ç–∏
              </Button>
            </div>
            <div className="text-xs text-muted-foreground text-center pt-2">
              –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            </div>
          </form>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default Index;